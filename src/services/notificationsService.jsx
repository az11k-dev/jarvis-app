import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';

export async function initNotifications() {
    if (!Device.isDevice) return;

    const {status: existingStatus} = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
        const {status} = await Notifications.requestPermissionsAsync();
        finalStatus = status;
    }

    if (finalStatus !== 'granted') {
        console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã');
        return;
    }

    console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');

    const token = (await Notifications.getExpoPushTokenAsync()).data;
    console.log('‚úÖ Expo Push Token:', token);
}

export async function scheduleReminder(message, seconds) {
    await Notifications.scheduleNotificationAsync({
        content: {
            title: "J.A.R.V.I.S. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            body: `–°—ç—Ä, ${message}`,
            sound: 'default',
            priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger: {
            type: 'timeInterval',
            seconds,
            repeats: false,
        },
    });
}

export async function cancelAllReminders() {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log('üõë –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã');
}

export function parseSecondsFromPhrase(text) {
    const secondMatch = text.match(/—á–µ—Ä–µ–∑ (\d+)\s?—Å–µ–∫—É–Ω–¥/);
    const minMatch = text.match(/—á–µ—Ä–µ–∑ (\d+)\s?–º–∏–Ω—É—Ç/);
    const hourMatch = text.match(/—á–µ—Ä–µ–∑ (\d+)\s?—á–∞—Å/);

    if (secondMatch) return parseInt(secondMatch[1], 10);
    if (minMatch) return parseInt(minMatch[1], 10) * 60;
    if (hourMatch) return parseInt(hourMatch[1], 10) * 3600;

    return null;
}

export function parseReminderDetails(text) {
    const timeRegex = /—á–µ—Ä–µ–∑ (\d+)\s?(—Å–µ–∫—É–Ω–¥|–º–∏–Ω—É—Ç|—á–∞—Å)/i;
    const timeMatch = text.match(timeRegex);

    if (!timeMatch) return null;

    const number = parseInt(timeMatch[1], 10);
    const unit = timeMatch[2].toLowerCase();
    let seconds;

    switch (unit) {
        case '—Å–µ–∫—É–Ω–¥':
            seconds = number;
            break;
        case '–º–∏–Ω—É—Ç':
            seconds = number * 60;
            break;
        case '—á–∞—Å':
            seconds = number * 3600;
            break;
        default:
            return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏( –º–Ω–µ)?/i, '')
        .replace(timeRegex, '')
        .replace(/—á–µ—Ä–µ–∑.*/i, '')
        .trim() || '–æ –∑–∞–¥–∞—á–µ';

    return {reminderText, seconds};
}